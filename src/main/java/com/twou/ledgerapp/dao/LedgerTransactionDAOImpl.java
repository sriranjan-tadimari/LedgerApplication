package com.twou.ledgerapp.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Random;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.twou.ledgerapp.model.LedgerTransaction;
import com.twou.ledgerapp.model.LedgerTransactionRowMapper;

/*
 * The DAO service layer that implements the CRUD operations required by REST calls 
 * made in the Ledger application. The class uses JDBC template as the mechanism for database
 * operations. The class enables Transactional support via @Transactional annotation.
 * @see LedgerTransactionController.java
 * @author Sriranjan Tadimari
 */

@Transactional
@Repository
public class LedgerTransactionDAOImpl implements LedgerTransactionDAO {

	private final JdbcTemplate jdbcTemplate;

	public LedgerTransactionDAOImpl(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	/*
	 * Get all the transactional records from the ledger table for soft_delete = 0.Each record
	 * is mapped to the Domain object LedgerTransaction using the LedgerTransactionRowMapper
	 * @returns Collection of LedgerTransaction if records are found OR empty list if no records found.
	 */
	@Override
	public List<LedgerTransaction> getAllNonDeleteLedgerTransactions() {
		String query = "SELECT * from ledger where soft_delete = 0";
		RowMapper<LedgerTransaction> rowMapper = new LedgerTransactionRowMapper();
		List<LedgerTransaction> list = jdbcTemplate.query(query, rowMapper);
		return list;
	}

	/*
	 * Get transaction record from the ledger table for id passed as an argument.The raw record
	 * is mapped to the Domain object LedgerTransaction using the LedgerTransactionRowMapper
	 * @returns LedgerTransaction domain object or NULL if no record is found.
	 * @throws SQLexception if no record is found
	 */
	@Override
	public LedgerTransaction getLedgerTransactionById(Long id) {
		String query = "SELECT id,sender, recipient,soft_delete, transaction_value FROM ledger WHERE id = ?";
		RowMapper<LedgerTransaction> rowMapper = new LedgerTransactionRowMapper();
		LedgerTransaction transaction = jdbcTemplate.queryForObject(query, rowMapper, id);
		return transaction;
	}

	/*
	 * Creates a new record for the Domain object LedgerTransaction passed as parameter. 
	 * @returns Autogenerated ID value.
	 */
	
	@Override
	public Long saveLedgerTransaction(LedgerTransaction transaction) {
		String query = "INSERT INTO ledger(sender, recipient,soft_delete, transaction_value) VALUES(?, ?, ?, ?)";
		double nextTransactionValue = getNextRandomTransactionValue();
		KeyHolder keyHolder = new GeneratedKeyHolder();
	    
		jdbcTemplate.update(connection -> {
	      PreparedStatement ps = connection.prepareStatement(query, new String[] { "id" });
	      ps.setString(1, transaction.getSenderName());
	      ps.setString(2, transaction.getRecipientName());
	      ps.setInt(3, 0);
	      ps.setDouble(4, nextTransactionValue);
	      return ps;
	    }, keyHolder);
	    return keyHolder.getKey().longValue();
	}

	/*
	 * Updates the transaction_value for the id passed as argument, with a randomly generated 
	 * double value by calling the getNextRandomTransactionValue() method for the 
	 * @returns Autogenerated ID value.
	 */
	@Override
	public Boolean updateLedgerTransactionTransValue(Long id) {
		String query = "UPDATE ledger SET transaction_value=? WHERE id=?";
		int noRowsAffected = jdbcTemplate.update(query, getNextRandomTransactionValue(), id);
		return true;
	}

	/*
	 * Updates the soft_delete value to 1 for the id passed as argument. 
	 * @param id value of the record to be deleted.
	 * @returns boolean value to indicate the status of the transaction
	 *
	 */

	@Override
	public Boolean softDeleteLedgerTransaction(Long id) {
		String query = "UPDATE ledger SET soft_delete=1 WHERE id=?";
		int noRowsAffected = jdbcTemplate.update(query, id);
		return true;
	}
	
	/*
	 * Calculates the sum of values in the transacted_value column for all records that has soft_delete=0 
	 * @returns Sum of values in the transacted_value column as a double OR 0.00 if no records exist
	 *
	 */

	@Override
	public Double getSumOfAllNonDeleteLedgerTransactions() {
		Double sumTransactedValue=0.00;
		String query = "SELECT SUM(transaction_value) FROM ledger WHERE soft_delete=0";
		sumTransactedValue = jdbcTemplate.queryForObject(query, Double.class);
		if(null != sumTransactedValue)
			return Math.round(sumTransactedValue * 100.0) / 100.0;
		return 0.00;
	}

	/*
	 * Utility method to generate a Random Double value
	 */
	private double getNextRandomTransactionValue() {
		double leftLimit = -10000D;
		double rightLimit = 10000D;
		double generatedDouble = leftLimit + new Random().nextDouble() * (rightLimit - leftLimit);
		return Math.round(generatedDouble * 100.0) / 100.0;
	}
}
