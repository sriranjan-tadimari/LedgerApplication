package com.twou.ledgerapp.model;

/*
 * This class corresponds to an entity in the 'ledger' database table. 
 * Every transaction record in the 'ledger' database table is an instance of this class.
 * @author Sriranjan Tadimari
 */
public class LedgerTransaction {
	
	//Corresponds to the primary key 'id' column in the table
	private Long id;
	
	//Maps to the sender column in the table.Does not allow null value.
	private String senderName;
	
	//Maps to the recipient column in the table.Does not allow null value.
	private String recipientName;
	
	/*
	 * Maps to the soft_delete column in the table.
	 * The boolean value of true corresponds to value of 1 in the record
	 * The boolean value of false corresponds to value of 0 in the record
	 * When a delete operation is performed, rather than the actual record gettin deleted,
	 * this flag controls the visibility of records for aggregate calculations 
	 */
	private boolean softDelete;
	
	/*
	 * Maps to the transaction_value column in the table. Does not allow null value
	 * This value represents a monetary value associated to this transaction record in the ledger and 
	 * can take in a random generated double value with 2 decimal places precision.
	 * When the @softDelete flag is true, the value stored in this field will not be taken into consideration
	 * for aggregate calculation.
	 */
	private double transactionValue;

	//Default Constructor
	public LedgerTransaction() {
	}
	
	//Setters and Getters for the properties
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getSenderName() {
		return senderName;
	}

	public void setSenderName(String senderName) {
		this.senderName = senderName;
	}

	public String getRecipientName() {
		return recipientName;
	}

	public void setRecipientName(String recipientName) {
		this.recipientName = recipientName;
	}

	public boolean isSoftDelete() {
		return softDelete;
	}

	public void setSoftDelete(boolean softDelete) {
		this.softDelete = softDelete;
	}

	public double getTransactionValue() {
		return transactionValue;
	}

	public void setTransactionValue(double transactionValue) {
		this.transactionValue = transactionValue;
	}

	//Equals and HashCode contract implementation - Generated by the eclipse editor.
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((recipientName == null) ? 0 : recipientName.hashCode());
		result = prime * result + ((senderName == null) ? 0 : senderName.hashCode());
		result = prime * result + (softDelete ? 1231 : 1237);
		long temp;
		temp = Double.doubleToLongBits(transactionValue);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		LedgerTransaction other = (LedgerTransaction) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (recipientName == null) {
			if (other.recipientName != null)
				return false;
		} else if (!recipientName.equals(other.recipientName))
			return false;
		if (senderName == null) {
			if (other.senderName != null)
				return false;
		} else if (!senderName.equals(other.senderName))
			return false;
		if (softDelete != other.softDelete)
			return false;
		if (Double.doubleToLongBits(transactionValue) != Double.doubleToLongBits(other.transactionValue))
			return false;
		return true;
	}
}
